// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  sex       UserSex
  createdAt DateTime @default(now())
  batchId   Int
  batch     Batch    @relation(fields: [batchId], references: [id])
  gradeId   Int
  grade     Grade    @relation(fields: [gradeId], references: [id])
  birthday  DateTime
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  batches   Batch[]
  birthday  DateTime

  // New field for assistant lecturer batches
  assistantBatches Batch[] @relation("BatchAssistantLecturers")
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  batches  Batch[]
}

model Batch {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  // New fields for assistant lecturers
  assistantLecturers Teacher[]      @relation("BatchAssistantLecturers")
  supervisorId       String?
  supervisor         Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons            Lesson[]
  students           Student[]
  events             Event[]
  announcements      Announcement[]
  DM                 DM?            @relation(fields: [dMId], references: [id])
  dMId               String?
  Grade              Grade?         @relation(fields: [gradeId], references: [id])
  gradeId            Int?
  zoomLink           ZoomLink?      @relation("BatchToZoomLink", fields: [zoomLinkId], references: [id])
  zoomLinkId         Int?           @unique
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  batchId   Int
  batch     Batch   @relation(fields: [batchId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  batchId Int?
  batch   Batch? @relation(fields: [batchId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  batchId Int?
  batch   Batch? @relation(fields: [batchId], references: [id])
}

model DM {
  id        String   @id @default(uuid()) // Unique identifier
  username  String   @unique // Unique username
  name      String // First name
  surname   String // Last name
  email     String?  @unique // Optional email, unique
  phone     String?  @unique // Optional phone number, unique
  address   String // Address
  img       String? // Optional image URL
  sex       UserSex // Gender
  createdAt DateTime @default(now()) // Automatically set creation time
  batches   Batch[] // Relation to the batches managed by this DM
  birthday  DateTime // Date of birth
}

model ZoomLink {
  id      Int     @id @default(autoincrement())
  url     String
  batch   Batch?  @relation("BatchToZoomLink")
  batchId Int?    @unique
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
